const { Pool } = require('pg');
require('dotenv').config({ path: './config.env' });

const pool = new Pool({
  connectionString: process.env.DB_URL,
  ssl: { rejectUnauthorized: false }
});

async function createTables() {
  try {
    console.log('Creating tables in Neon PostgreSQL...');
    
    // Create users table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        role VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'receptionist', 'doctor')),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created users table');
    
    // Create patients table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS patients (
        id SERIAL PRIMARY KEY,
        full_name VARCHAR(100) NOT NULL,
        gender VARCHAR(10) NOT NULL CHECK (gender IN ('Nam', 'N·ªØ')),
        birth_year INTEGER NOT NULL,
        address TEXT,
        phone_number VARCHAR(15) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created patients table');
    
    // Create medicines table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS medicines (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        unit VARCHAR(20) NOT NULL,
        price DECIMAL(10,2) NOT NULL,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created medicines table');
    
    // Create diseases table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS diseases (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        description TEXT,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created diseases table');
    
    // Create units table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS units (
        id SERIAL PRIMARY KEY,
        name VARCHAR(20) NOT NULL,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created units table');
    
    // Create usage_methods table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS usage_methods (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created usage_methods table');
    
    // Create medical_records table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS medical_records (
        id SERIAL PRIMARY KEY,
        patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,
        doctor_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
        symptoms TEXT NOT NULL,
        disease_id INTEGER REFERENCES diseases(id) ON DELETE SET NULL,
        diagnosis TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created medical_records table');
    
    // Create prescription_details table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS prescription_details (
        id SERIAL PRIMARY KEY,
        medical_record_id INTEGER REFERENCES medical_records(id) ON DELETE CASCADE,
        medicine_id INTEGER REFERENCES medicines(id) ON DELETE CASCADE,
        quantity INTEGER NOT NULL CHECK (quantity > 0),
        usage_method_id INTEGER REFERENCES usage_methods(id) ON DELETE SET NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created prescription_details table');
    
    // Create daily_appointments table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS daily_appointments (
        id SERIAL PRIMARY KEY,
        patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,
        appointment_date DATE NOT NULL,
        status VARCHAR(20) NOT NULL DEFAULT 'waiting' CHECK (status IN ('waiting', 'examined', 'completed')),
        medical_record_id INTEGER REFERENCES medical_records(id) ON DELETE SET NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created daily_appointments table');
    
    // Create invoices table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS invoices (
        id SERIAL PRIMARY KEY,
        patient_id INTEGER REFERENCES patients(id) ON DELETE CASCADE,
        medical_record_id INTEGER REFERENCES medical_records(id) ON DELETE CASCADE,
        daily_appointment_id INTEGER REFERENCES daily_appointments(id) ON DELETE CASCADE,
        consultation_fee DECIMAL(10,2) NOT NULL,
        medicine_fee DECIMAL(10,2) NOT NULL,
        total_amount DECIMAL(10,2) NOT NULL,
        payment_status VARCHAR(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid')),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created invoices table');
    
    // Create system_settings table
    await pool.query(`
      CREATE TABLE IF NOT EXISTS system_settings (
        id SERIAL PRIMARY KEY,
        setting_key VARCHAR(50) UNIQUE NOT NULL,
        setting_value TEXT NOT NULL,
        description TEXT,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ Created system_settings table');
    
    // Insert default data
    console.log('\nüìù Inserting default data...');
    
    // Insert default users
    await pool.query(`
      INSERT INTO users (username, password, role) VALUES 
      ('admin', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin'),
      ('receptionist1', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'receptionist'),
      ('doctor1', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'doctor')
      ON CONFLICT (username) DO NOTHING
    `);
    console.log('‚úÖ Inserted default users');
    
    // Insert default units
    await pool.query(`
      INSERT INTO units (name) VALUES 
      ('vi√™n'), ('chai'), ('tu√Ωp'), ('g√≥i'), ('ml'), ('mg')
      ON CONFLICT DO NOTHING
    `);
    console.log('‚úÖ Inserted default units');
    
    // Insert default usage methods
    await pool.query(`
      INSERT INTO usage_methods (name) VALUES 
      ('U·ªëng sau b·ªØa ƒÉn'), ('U·ªëng tr∆∞·ªõc b·ªØa ƒÉn'), ('U·ªëng khi ƒë√≥i'), 
      ('B√¥i ngo√†i da'), ('Nh·ªè m·∫Øt'), ('Nh·ªè m≈©i'), ('Ti√™m b·∫Øp'), ('Ti√™m tƒ©nh m·∫°ch')
      ON CONFLICT DO NOTHING
    `);
    console.log('‚úÖ Inserted default usage methods');
    
    // Insert default diseases
    await pool.query(`
      INSERT INTO diseases (name, description) VALUES 
      ('C·∫£m c√∫m', 'B·ªánh do virus g√¢y ra v·ªõi c√°c tri·ªáu ch·ª©ng s·ªët, ho, ƒëau ƒë·∫ßu'),
      ('Vi√™m h·ªçng', 'T√¨nh tr·∫°ng vi√™m nhi·ªÖm ·ªü v√πng h·ªçng'),
      ('ƒêau d·∫° d√†y', 'C√°c v·∫•n ƒë·ªÅ v·ªÅ ti√™u h√≥a v√† d·∫° d√†y'),
      ('Cao huy·∫øt √°p', 'T√¨nh tr·∫°ng huy·∫øt √°p cao h∆°n b√¨nh th∆∞·ªùng'),
      ('Ti·ªÉu ƒë∆∞·ªùng', 'R·ªëi lo·∫°n chuy·ªÉn h√≥a glucose trong m√°u')
      ON CONFLICT DO NOTHING
    `);
    console.log('‚úÖ Inserted default diseases');
    
    // Insert default medicines
    await pool.query(`
      INSERT INTO medicines (name, unit, price) VALUES 
      ('Paracetamol 500mg', 'vi√™n', 2000),
      ('Amoxicillin 500mg', 'vi√™n', 5000),
      ('Omeprazole 20mg', 'vi√™n', 3000),
      ('Metformin 500mg', 'vi√™n', 4000),
      ('Lisinopril 10mg', 'vi√™n', 6000),
      ('Vitamin C 1000mg', 'vi√™n', 1500)
      ON CONFLICT DO NOTHING
    `);
    console.log('‚úÖ Inserted default medicines');
    
    // Insert system settings
    await pool.query(`
      INSERT INTO system_settings (setting_key, setting_value, description) VALUES 
      ('max_patients_per_day', '50', 'S·ªë l∆∞·ª£ng b·ªánh nh√¢n t·ªëi ƒëa trong m·ªôt ng√†y'),
      ('consultation_fee', '100000', 'Ph√≠ kh√°m b·ªánh m·∫∑c ƒë·ªãnh (VND)')
      ON CONFLICT (setting_key) DO NOTHING
    `);
    console.log('‚úÖ Inserted system settings');
    
    console.log('\nüéâ Database setup completed successfully!');
    
    // Test the setup
    const usersCount = await pool.query('SELECT COUNT(*) as count FROM users');
    const patientsCount = await pool.query('SELECT COUNT(*) as count FROM patients');
    const medicinesCount = await pool.query('SELECT COUNT(*) as count FROM medicines');
    
    console.log('\nüìä Database Summary:');
    console.log(`   Users: ${usersCount.rows[0].count}`);
    console.log(`   Patients: ${patientsCount.rows[0].count}`);
    console.log(`   Medicines: ${medicinesCount.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå Error creating tables:', error.message);
  } finally {
    await pool.end();
  }
}

createTables();
